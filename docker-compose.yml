version: '3'

volumes:
  mysql_data_users:
  mysql_data_subscription:
  mysql_data_api:
  mysql_data_bestflights:
  mysql_data_sla:

networks:
  mainetwork:

services:
  gateway:
    build:
      context: nginx
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "8081:8081"
    depends_on:
      - auth_service
      - subscription_service
    networks:
      - mainetwork
    restart: always

  mysql_users:
    image: mysql:latest
    container_name: mysql_users
    environment:
      MYSQL_ROOT_PASSWORD: '12345'
      MYSQL_DATABASE: 'users'  # Nome del database per il servizio auth
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
    ports:
      - "3306:3306"
    networks:
      - mainetwork
    volumes:
      - mysql_data_users:/var/lib/mysql
    restart: always

  auth_service:
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      MYSQL_DATABASE: 'users'  # Utilizza lo stesso database 'auth' per il servizio auth
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
      MYSQL_ROOT_PASSWORD: '12345'
      SECRET_KEY: 'chiavesegreta'
    ports:
      - "5000:5000"
    networks:
      - mainetwork
    restart: always
    depends_on:
      - mysql_users

  mysql_subscription:
    image: mysql:latest
    container_name: mysql_subscription
    environment:
      MYSQL_ROOT_PASSWORD: '12345'
      MYSQL_DATABASE: 'subscription'  # Nuovo database per il serviziometeo
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
    ports:
      - "9091:3306"
    networks:
      - mainetwork
    volumes:
     - mysql_data_subscription:/var/lib/mysql
    restart: always

  subscription_service:
    build:
      context: subscription_service
      dockerfile: Dockerfile
    container_name: subscription_service
    environment:
      MYSQL_DATABASE: 'subscription'  # Nuovo database per il servizio meteo
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
      MYSQL_ROOT_PASSWORD: '12345'
      SECRET_KEY: 'chiavesegreta'
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'  # Indirizzo del broker Kafka
    ports:
      - "5001:5001"
    networks:
      - mainetwork
    restart: always
    depends_on:
      - mysql_subscription
      - kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mainetwork
    expose:
      - "2181"
    restart: always

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    networks:
      - mainetwork
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092 #all'interno della rete Docker tra i tuoi servizi, utilizzi l'indirizzo interno (kafka:9092). Quando comunichi da un host esterno al container, utilizzi l'indirizzo e la porta esposta (localhost:29092). Questo approccio consente di gestire le comunicazioni interne ed esterne senza modificare la configurazione.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  mysql_api:
    image: mysql:latest
    container_name: mysql_api
    environment:
      MYSQL_ROOT_PASSWORD: '12345'
      MYSQL_DATABASE: 'api'  # Nome del database per il servizio auth
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
    ports:
      - "9093:3306"
    networks:
      - mainetwork
    volumes:
      - mysql_data_api:/var/lib/mysql
    restart: always

  api_service:
    build:
      context: api_service
      dockerfile: Dockerfile
    container_name: api_service
    environment:
      MYSQL_DATABASE: 'api'  # Nuovo database per il servizio
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
      MYSQL_ROOT_PASSWORD: '12345'
      KAFKA_BOOTSTRAP_SERVERS: 'kafka:9092'  # Indirizzo del broker Kafka
      KAFKA_GROUP: 'group'
    ports:
      - "5002:5002"
    networks:
      - mainetwork
    restart: always
    depends_on:
      - mysql_api
      - kafka

  mysql_bestflights:
    image: mysql:latest
    container_name: mysql_bestflights
    environment:
      MYSQL_ROOT_PASSWORD: '12345'
      MYSQL_DATABASE: 'bestflights'  # Nuovo database per il servizio
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
    ports:
      - "9094:3306"
    networks:
      - mainetwork
    volumes:
      - mysql_data_bestflights:/var/lib/mysql
    restart: always

  notifier_service:
    build:
      context: notifier_service
      dockerfile: Dockerfile
    container_name: notifier_service
    environment:
      MYSQL_DATABASE: 'bestflights'  # Nuovo database per il servizio meteo
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
      MYSQL_ROOT_PASSWORD: '12345'
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"  # Indirizzo del broker Kafka
      KAFKA_GROUP_ID: "group"
      MAIL_SERVER: 'smtp.libero.it'
      MAIL_PORT: 465
      MAIL_USE_TLS: False
      MAIL_USE_SSL: True
      MAIL_USERNAME: 'angelo-cocuzza@libero.it'
      MAIL_PASSWORD: 'Bestflights123!'
      MAIL_DEFAULT_SENDER: 'angelo-cocuzza@libero.it'
    ports:
      - "5003:5003"
    networks:
      - mainetwork
    restart: always
    depends_on:
      - mysql_bestflights
      - kafka

  mysql_sla:
    image: mysql:latest
    container_name: mysql_sla
    environment:
      MYSQL_ROOT_PASSWORD: '12345'
      MYSQL_DATABASE: 'sla'
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
    networks:
      - mainetwork
    volumes:
      - mysql_data_sla:/var/lib/mysql
    ports:
      - "9096:3306"
    restart: always

  sla_manager:
    container_name: sla_manager
    build:
      context: ./sla_Manager
      dockerfile: Dockerfile
    environment:
      MYSQL_DATABASE: 'users'
      MYSQL_USER: 'an'
      MYSQL_PASSWORD: '12345'
      MYSQL_ROOT_PASSWORD: '12345'
    ports:
      - "5005:5005"
    depends_on:
      - prometheus
      - mysql_SLA

  cadvisor:
    image: google/cadvisor:latest
    ports:
      - "8080:8080"
    networks:
      - mainetwork
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  node_exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    networks:
      - mainetwork

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - mainetwork
    volumes:
      - ./prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    depends_on:
      - cadvisor
      - node_exporter
